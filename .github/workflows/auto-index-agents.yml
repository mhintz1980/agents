name: Auto-Index Agents

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build-index:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate agent index
        run: |
          node -e "require('fs').existsSync('tools')||require('fs').mkdirSync('tools')"
          cat > tools/auto-index-agents.js <<'JS'
          const fs = require('fs');
          const path = require('path');

          const CATEGORIES = [
            '01-core-development',
            '02-language-specialists',
            '03-infrastructure',
            '04-quality-security',
            '05-data-ai',
            '06-developer-experience',
            '07-specialized-domains',
            '08-business-product',
            '09-meta-orchestration',
            '10-research-analysis'
          ];

          function readFileSafe(p) {
            try { return fs.readFileSync(p, 'utf8'); } catch { return ''; }
          }

          function parseFrontmatter(md) {
            // Very light parser: look for leading --- yaml --- blocks
            const fm = md.match(/^---\\s*[\\r\\n]+([\\s\\S]*?)\\n---/);
            const out = {};
            if (fm) {
              fm[1].split(/\\r?\\n/).forEach(line=>{
                const m = line.match(/^\\s*([a-zA-Z0-9_-]+)\\s*:\\s*(.*)$/);
                if (m) out[m[1].trim()] = m[2].trim().replace(/^"(.*)"$/, '$1');
              });
            }
            // Also grab first H1 as title if present
            const h1 = md.match(/^#\\s+(.+)$/m);
            if (h1 && !out.title) out.title = h1[1].trim();
            return out;
          }

          function snake(s){ return String(s||'').trim().toLowerCase().replace(/\\s+/g,'-'); }

          const agents = [];
          for (const dir of CATEGORIES) {
            if (!fs.existsSync(dir)) continue;
            const files = fs.readdirSync(dir).filter(f=>f.endsWith('.md'));
            for (const f of files) {
              const p = path.join(dir, f);
              const md = readFileSafe(p);
              const fm = parseFrontmatter(md);
              const name = fm.name || snake(f.replace(/\\.md$/, ''));
              const description = fm.description || '';
              const category = fm.category || dir;
              agents.push({
                name, description, category,
                file: p
              });
            }
          }

          // Load the existing improved-index.yml if present to keep header/defaults
          const INDEX = 'improved-index.yml';
          const existing = readFileSafe(INDEX);

          // Very simple header defaults
          const header = `# Agent registry for orchestration
version: 1
generated_at: "${new Date().toISOString()}"
notes: >
  Auto-generated by CI. Edit agent front-matter in their .md files, not here.

categories:
  core-development: "01-core-development"
  language-specialists: "02-language-specialists"
  infrastructure: "03-infrastructure"
  quality-security: "04-quality-security"
  data-ai: "05-data-ai"
  developer-experience: "06-developer-experience"
  specialized-domains: "07-specialized-domains"
  business-product: "08-business-product"
  meta-orchestration: "09-meta-orchestration"
  research-analysis: "10-research-analysis"

defaults:
  ui_policy:
    prefer_magic: true
    fallback_style: "shadcn+tailwind; a11y; responsive"
  mcp_priority: ["magic","context7","sequential-thinking","playwright","tavily"]
  planning_pattern: "Understand → Plan → Execute → Validate"

agents:
`;

          agents.sort((a,b)=> a.name.localeCompare(b.name));

          const yamlLines = [];
          for (const a of agents) {
            yamlLines.push(
              `  - name: ${a.name}`,
              `    category: ${a.category.startsWith('0') ? a.category : a.category}`,
              ...(a.description ? [`    description: "${a.description.replace(/"/g,'\\"')}"`] : []),
              `    source_file: "${a.file}"`,
              ``
            );
          }

          fs.writeFileSync(INDEX, header + yamlLines.join('\\n'), 'utf8');

          console.log(`Wrote ${INDEX} with ${agents.length} agents.`);
          JS

          node tools/auto-index-agents.js

      - name: Create or update branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          BRANCH="feat/auto-index-agents"
          git checkout -B "$BRANCH"
          git add improved-index.yml tools/auto-index-agents.js
          git commit -m "chore: auto-index agents (CI)" || echo "Nothing to commit"
          git push -u origin "$BRANCH"

      - name: Open or update PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const branch = "feat/auto-index-agents";
            const prs = await github.rest.pulls.list({ owner, repo, head: `${owner}:${branch}`, state: 'open' });
            if (prs.data.length) {
              core.info("PR already open.");
            } else {
              await github.rest.pulls.create({
                owner, repo,
                head: branch,
                base: "main",
                title: "chore: auto-index agents (CI)",
                body: "Automatically generated agent registry from repository contents."
              });
            }
