const fs = require('fs');
const path = require('path');

/** Folders to skip when walking */
const IGNORE_DIRS = new Set([
  '.git', '.github', '.husky', 'node_modules', 'dist', 'build', '.next', '.vercel'
]);

/** Map first-level folders to category names for nice labeling */
const CATEGORY_MAP = new Map([
  ['01-core-development', '01-core-development'],
  ['02-language-specialists', '02-language-specialists'],
  ['03-infrastructure', '03-infrastructure'],
  ['04-quality-security', '04-quality-security'],
  ['05-data-ai', '05-data-ai'],
  ['06-developer-experience', '06-developer-experience'],
  ['07-specialized-domains', '07-specialized-domains'],
  ['08-business-product', '08-business-product'],
  ['09-meta-orchestration', '09-meta-orchestration'],
  ['10-research-analysis', '10-research-analysis'],
]);

/** Recursively collect all .md files (agents) */
function walk(dir, baseDepth = dir.split(path.sep).length, out = []) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  for (const e of entries) {
    if (e.name.startsWith('.')) continue;
    const p = path.join(dir, e.name);
    if (e.isDirectory()) {
      if (IGNORE_DIRS.has(e.name)) continue;
      walk(p, baseDepth, out);
    } else if (e.isFile() && e.name.toLowerCase().endsWith('.md')) {
      out.push(p);
    }
  }
  return out;
}

function readFileSafe(p) {
  try { return fs.readFileSync(p, 'utf8'); } catch { return ''; }
}

function parseFrontmatter(md) {
  const fm = md.match(/^---\s*[\r\n]+([\s\S]*?)\n---/);
  const out = {};
  if (fm) {
    fm[1].split(/\r?\n/).forEach(line => {
      const m = line.match(/^\s*([a-zA-Z0-9_-]+)\s*:\s*(.*)$/);
      if (m) out[m[1].trim()] = m[2].trim().replace(/^"(.*)"$/, '$1');
    });
  }
  const h1 = md.match(/^#\s+(.+)$/m);
  if (h1 && !out.title) out.title = h1[1].trim();
  return out;
}

function snake(s){ return String(s||'').trim().toLowerCase().replace(/\s+/g,'-'); }

/** Decide category:
 * - If the file is at repo root: "superclaude-root"
 * - If the first path segment matches a known category folder: use that
 * - Else: "misc"
 */
function chooseCategory(filepath) {
  const parts = filepath.split(path.sep);
  if (parts.length === 1) return 'superclaude-root';
  const top = parts[0];
  if (CATEGORY_MAP.has(top)) return CATEGORY_MAP.get(top);
  return 'misc';
}

// Collect all agents from repo root downward (except ignored)
const allMd = walk('.', 0, [])
  // ignore obvious non-agent docs at root if any:
  .filter(p => !/^(README|CONTRIBUTING|LICENSE)\.md$/i.test(path.basename(p)));

const agents = [];
for (const p of allMd) {
  const md = readFileSafe(p);
  const fm = parseFrontmatter(md);
  const name = fm.name || snake(path.basename(p, '.md'));
  const description = fm.description || fm.title || '';
  const category = fm.category || chooseCategory(p);
  agents.push({ name, description, category, file: p });
}

// Header identical to earlier, kept for consistency
const header = `# Agent registry for orchestration
version: 1
generated_at: "${new Date().toISOString()}"
notes: >
  Auto-generated by CI. Edit agent front-matter in their .md files, not here.

categories:
  core-development: "01-core-development"
  language-specialists: "02-language-specialists"
  infrastructure: "03-infrastructure"
  quality-security: "04-quality-security"
  data-ai: "05-data-ai"
  developer-experience: "06-developer-experience"
  specialized-domains: "07-specialized-domains"
  business-product: "08-business-product"
  meta-orchestration: "09-meta-orchestration"
  research-analysis: "10-research-analysis"
  superclaude-root: "superclaude-root"
  misc: "misc"

defaults:
  ui_policy:
    prefer_magic: true
    fallback_style: "shadcn+tailwind; a11y; responsive"
  mcp_priority: ["magic","context7","sequential-thinking","playwright","tavily"]
  planning_pattern: "Understand → Plan → Execute → Validate"

agents:
`;

agents.sort((a,b)=> a.name.localeCompare(b.name));

const yamlLines = [];
for (const a of agents) {
  yamlLines.push(
    `  - name: ${a.name}`,
    `    category: ${a.category}`,
    ...(a.description ? [`    description: "${a.description.replace(/"/g,'\\"')}"`] : []),
    `    source_file: "${a.file}"`,
    ``
  );
}

fs.writeFileSync('improved-index.yml', header + yamlLines.join('\n'), 'utf8');
console.log(`Wrote improved-index.yml with ${agents.length} agents.`);
