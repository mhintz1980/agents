const fs = require('fs');
const path = require('path');

const CATEGORIES = [
  '01-core-development',
  '02-language-specialists',
  '03-infrastructure',
  '04-quality-security',
  '05-data-ai',
  '06-developer-experience',
  '07-specialized-domains',
  '08-business-product',
  '09-meta-orchestration',
  '10-research-analysis'
];

function readFileSafe(p) {
  try { return fs.readFileSync(p, 'utf8'); } catch { return ''; }
}

function parseFrontmatter(md) {
  const fm = md.match(/^---\s*[\r\n]+([\s\S]*?)\n---/);
  const out = {};
  if (fm) {
    fm[1].split(/\r?\n/).forEach(line => {
      const m = line.match(/^\s*([a-zA-Z0-9_-]+)\s*:\s*(.*)$/);
      if (m) out[m[1].trim()] = m[2].trim().replace(/^"(.*)"$/, '$1');
    });
  }
  const h1 = md.match(/^#\s+(.+)$/m);
  if (h1 && !out.title) out.title = h1[1].trim();
  return out;
}

function snake(s){ return String(s||'').trim().toLowerCase().replace(/\s+/g,'-'); }

const agents = [];
for (const dir of CATEGORIES) {
  if (!fs.existsSync(dir)) continue;
  const files = fs.readdirSync(dir).filter(f => f.endsWith('.md'));
  for (const f of files) {
    const p = path.join(dir, f);
    const md = readFileSafe(p);
    const fm = parseFrontmatter(md);
    const name = fm.name || snake(f.replace(/\.md$/, ''));
    const description = fm.description || '';
    const category = fm.category || dir;
    agents.push({ name, description, category, file: p });
  }
}

const header = `# Agent registry for orchestration
version: 1
generated_at: "${new Date().toISOString()}"
notes: >
  Auto-generated by CI. Edit agent front-matter in their .md files, not here.

categories:
  core-development: "01-core-development"
  language-specialists: "02-language-specialists"
  infrastructure: "03-infrastructure"
  quality-security: "04-quality-security"
  data-ai: "05-data-ai"
  developer-experience: "06-developer-experience"
  specialized-domains: "07-specialized-domains"
  business-product: "08-business-product"
  meta-orchestration: "09-meta-orchestration"
  research-analysis: "10-research-analysis"

defaults:
  ui_policy:
    prefer_magic: true
    fallback_style: "shadcn+tailwind; a11y; responsive"
  mcp_priority: ["magic","context7","sequential-thinking","playwright","tavily"]
  planning_pattern: "Understand → Plan → Execute → Validate"

agents:
`;

agents.sort((a,b)=> a.name.localeCompare(b.name));

const yamlLines = [];
for (const a of agents) {
  yamlLines.push(
    `  - name: ${a.name}`,
    `    category: ${a.category}`,
    ...(a.description ? [`    description: "${a.description.replace(/"/g,'\\"')}"`] : []),
    `    source_file: "${a.file}"`,
    ``
  );
}

fs.writeFileSync('improved-index.yml', header + yamlLines.join('\n'), 'utf8');
console.log(`Wrote improved-index.yml with ${agents.length} agents.`);
